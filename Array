1.Write a program to accept N values into an integer array and display the contents of the array in the reverse order.
#include <stdio.h>

int main() {
    int arr[100];  
    int N;

    printf("Enter the number of elements: ");
    scanf("%d", &N);

    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Elements in reverse order:\n");
    for (int i = N - 1; i >= 0; i--) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
________________________________________________________________________________________________________________________________________________________________________
2.Write a  program to count the number of 0s and 1s in an array that is in random order. You may assume that the array consists of only 0s and 1s
#include <stdio.h>

int main() {
    int arr[100]; 
    int N;
    int count0 = 0, count1 = 0;
    printf("Enter the number of elements: ");
    scanf("%d", &N);

    printf("Enter %d elements (0s and 1s only):\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }
    for (int i = 0; i < N; i++) {
        if (arr[i] == 0) {
            count0++;
        } else if (arr[i] == 1) {
            count1++;
        } else {
            printf("Invalid input. Array should only contain 0s and 1s.\n");
            return 1;  
        }
    }
    printf("Number of 0s: %d\n", count0);
    printf("Number of 1s: %d\n", count1);

    return 0;
}
_______________________________________________________________________________________________________________________________________________________________________________
3. Write a  program to print the count of the elements in an array whose values are lesser than a key element in an unsorted array.
#include <stdio.h>

int main() {
    int arr[100];
    int N, key;
    int count = 0;

    printf("Enter the number of elements: ");
    scanf("%d", &N);

    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

    // Input the key element
    printf("Enter the key element: ");
    scanf("%d", &key);

    for (int i = 0; i < N; i++) {
        if (arr[i] < key) {
            count++;
        }
    }
    printf("Number of elements less than %d: %d\n", key, count);

    return 0;
}
_____________________________________________________________________________________________________________________________________________________________________
4.Write a  Program to print all the repeated elements in a sorted array.
#include <stdio.h>

void printRepeatedElements(int arr[], int size) {
    int i;
    printf("Repeated elements in the sorted array are: ");
    for (i = 0; i < size - 1; i++) {
        if (arr[i] == arr[i + 1]) {
            printf("%d ", arr[i]);
            // Skip over the repeated elements
            while (arr[i] == arr[i + 1]) {
                i++;
            }
        }
    }
    printf("\n");
}

int main() {
    int arr[] = {1,1,1,2,4,5};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Given sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printRepeatedElements(arr, size);

    return 0;
}

__________________________________________________________________________________________________________________________________________________________________________
5.Write a program to search an element in the given array and print the searched elements index. If no such elements were found print -1
#include <stdio.h>

int main() {
    int arr[100];  
    int N, key;
    int found = 0; 
    int index = -1;

    printf("Enter the number of elements: ");
    scanf("%d", &N);

    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the element to search: ");
    scanf("%d", &key);

  
    for (int i = 0; i < N; i++) {
        if (arr[i] == key) {
            found = 1;  
            index = i;  
            break;      
        }
    }
    if (found) {
        printf("Element %d found at index %d\n", key, index);
    } else {
        printf("Element %d not found\n", key);
    }

    return 0;
}
_________________________________________________________________________________________________________________________________________________________________
6.You are given an array of 0s and 1s in random order. Segregate 0s on left side and 1s on right side of the array . 
#include <stdio.h>

void segregateZerosOnes(int arr[], int N) {
    int left = 0;      
    int right = N - 1;  
    
    while (left <= right) {      
        while (arr[left] == 0 && left <= right) {
            left++;
        }
    
        while (arr[right] == 1 && left <= right) {
            right--;
        }
        
        if (left <= right) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
    }
}

int main() {
    int arr[100];  
    int N;

    printf("Enter the number of elements: ");
    scanf("%d", &N);
    printf("Enter %d elements (0s and 1s only):\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }
    segregateZerosOnes(arr, N);
  
    printf("Segregated array: ");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
_______________________________________________________________________________________________________________________________________________
7.Write a program  to replace every element in an array with the sum of its right side elements
#include <stdio.h>

void replaceWithRightSum(int arr[], int N) {
    int sum = 0;  // Initialize sum to 0
    
    for (int i = N - 1; i >= 0; i--) {
        int temp = arr[i]; 
        arr[i] = sum;      
        sum += temp;       
    }
}

int main() {
    int arr[100];  
    int N;

    printf("Enter the number of elements: ");
    scanf("%d", &N);
    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }
    replaceWithRightSum(arr, N);

    
    printf("Array after replacing with sum of right side elements:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
________________________________________________________________________________________________________________________________________________________________________-
8.Write a program  to reverse the array elements
#include <stdio.h>

void reverseArray(int arr[], int N) {
    int left = 0;
    int right = N - 1;
    while (left < right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;
        left++;
        right--;
    }
}
int main() {
    int arr[100]; 
    int N;
    printf("Enter the number of elements: ");
    scanf("%d", &N);

    
    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

   
    reverseArray(arr, N);

    printf("Reversed array:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
__________________________________________________________________________________________________________________________________________________-
9.Write a program  to insert the value at given position in the array.
#include <stdio.h>
#define MAX_SIZE 100
int main() {
    int arr[MAX_SIZE];
    int size, i, pos, value;
    printf("Enter size of the array: ");
    scanf("%d", &size);
    printf("Enter elements of the array:\n");
    for (i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Enter the position where you want to insert (0 - based index): ");
    scanf("%d", &pos);
    printf("Enter the value to insert: ");
    scanf("%d", &value);
    for (i = size - 1; i >= pos; i--) {
        arr[i + 1] = arr[i];
    }
    arr[pos] = value;
    size++;
    printf("Array after insertion:\n");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
_____________________________________________________________________________________________________________________________________________________________________________
10.Write a program  to delete the value at given position from the array.
#include <stdio.h>

void deleteElement(int arr[], int *size, int position) {
    if (position < 0 || position >= *size) {
        printf("Invalid position!\n");
        return;
    }

    for (int i = position; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Decrease the size of the array
    (*size)--;
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[100]; 
    int size, position;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter %d elements:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the position to delete (0 to %d): ", size - 1);
    scanf("%d", &position);

    deleteElement(arr, &size, position);

    printf("Array after deletion:\n");
    printArray(arr, size);

    return 0;
}
________________________________________________________________________________________________________________________________________________________________________________
11.Write a program  to swap every pair of  adjacent array elements
#include <stdio.h>

void swapAdjacent(int arr[], int n) {
    for (int i = 0; i < n - 1; i += 2) {
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
}

int main() {
    int n;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    swapAdjacent(arr, n);

    printf("Array after swapping adjacent elements:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
______________________________________________________________________________________________________________________________________________________
12.Write a program  to left rotate for given times of an array elements
#include <stdio.h>

void leftRotate(int arr[], int n, int d) {
    d = d % n; 
    int temp[d];

    for (int i = 0; i < d; i++) {
        temp[i] = arr[i];
    }

    for (int i = 0; i < n - d; i++) {
        arr[i] = arr[i + d];
    }

    for (int i = 0; i < d; i++) {
        arr[n - d + i] = temp[i];
    }
}

int main() {
    int n, d;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the number of left rotations: ");
    scanf("%d", &d);

    leftRotate(arr, n, d);

    printf("Array after %d left rotations:\n", d);
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
__________________________________________________________________________________________________________________________________________________________--
13.Given an array X with n number of elements, return true if the given array X is sorted else return false. You may consider multiple positions may be shifted in the array X. 
Example 1: Input: X=[1,2,3,4,5] Output: true 
Example 2: Input: X=[3,4,5, 1,2,] Output: true
Example 3: Input: X=[3,1,2,4,5] Output: false
#include <stdio.h>
#include <stdbool.h>

bool isRotatedSorted(int arr[], int n) {
    int count = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] > arr[(i + 1) % n]) {
            count++;
        }
    }

    return count <= 1;
}

int main() {
    int n;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    if (isRotatedSorted(arr, n)) {
        printf("The array is sorted (considering rotations).\n");
    } else {
        printf("The array is not sorted (considering rotations).\n");
    }

    return 0;
}
_____________________________________________________________________________________________________________________________________________________________________}
14.Write a program  to remove the duplicates in an array .
#include <stdio.h>

void removeDuplicates(int arr[], int *n) {
    int temp[*n]; 
    int j = 0;    

    for (int i = 0; i < *n; i++) {

        int found = 0;
        for (int k = 0; k < j; k++) {
            if (arr[i] == temp[k]) {
                found = 1;
                break;
            }
        }
  
        if (!found) {
            temp[j++] = arr[i];
        }
    }

    for (int i = 0; i < j; i++) {
        arr[i] = temp[i];
    }
    
    *n = j; 
}

int main() {
    int n;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    removeDuplicates(arr, &n);

    printf("Array after removing duplicates:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
__________________________________________________________________________________________________________________________________________________________________
15.Write a program  to find second largest and second smallest in array
#include <stdio.h>
#include <limits.h>

void findSecondLargestAndSmallest(int arr[], int n, int *secondLargest, int *secondSmallest) {
    int largest = INT_MIN, secondLargestTemp = INT_MIN;
    int smallest = INT_MAX, secondSmallestTemp = INT_MAX;

    for (int i = 0; i < n; i++) 
        if (arr[i] > largest) {
            secondLargestTemp = largest;
            largest = arr[i];
        } else if (arr[i] > secondLargestTemp && arr[i] < largest) {
            secondLargestTemp = arr[i];
        }
        if (arr[i] < smallest) {
            secondSmallestTemp = smallest;
            smallest = arr[i];
        } else if (arr[i] < secondSmallestTemp && arr[i] > smallest) {
            secondSmallestTemp = arr[i];
        }
    }

    *secondLargest = secondLargestTemp;
    *secondSmallest = secondSmallestTemp;
}

int main() {
    int n;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    if (n < 2) {
        printf("Array must have at least two elements.\n");
        return 1;
    }

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int secondLargest, secondSmallest;
    findSecondLargestAndSmallest(arr, n, &secondLargest, &secondSmallest);

    if (secondLargest == INT_MIN) {
        printf("There is no second largest element.\n");
    } else {
        printf("Second largest element is: %d\n", secondLargest);
    }

    if (secondSmallest == INT_MAX) {
        printf("There is no second smallest element.\n");
    } else {
        printf("Second smallest element is: %d\n", secondSmallest);
    }

    return 0;
}
_______________________________________________________________________________________________________________________________________________________________














